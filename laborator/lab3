#include <iostream>
#include <string.h> ///functii pt caractere :D
using namespace std;

class Student{
    ///private,protected,public;
private:
    const int ID_Matricol;
    int varsta;
    char* nume;
    int nrNote;
    int* note;
public:
    static int anCurent;
    static void mesaj()
    {
        cout<<"bine ati venit studenti de anul "<<anCurent<<endl;
        //cout<<"bine ati venit studenti de anul "<<this->nrNote;   //nu merge,ca nrNote nu e static
    }
    Student():ID_Matricol(0000)
    {
        this->varsta = 0;
        this->nume = new char[strlen("Anonim")+1];
        strcpy(this->nume,"Anonim");
    }
    Student(int id,int varsta,char* nume,int nrNote,int* note):ID_Matricol(id)
    {
        this->varsta = varsta;

        this->nume = new char[strlen(nume)+1];
        strcpy(this->nume,nume);

        this->nrNote = nrNote;

        this->note = new int[nrNote];

        for(int i = 0;i < nrNote;i++)
            this->note[i] = note[i];
    }
    void afisare()
    {
        cout<<"Studentul "<<this->nume<<" are urmatoarele note: ";
        for(int i = 0; i < this->nrNote; i++)
            cout<< this->note[i]<<" ";
        cout<<endl;
    }
    float medieStudent()
    {
        float medie_note;
        for (int i = 0;i < this->nrNote;i++)
            medie_note=medie_note+this->note[i];
        medie_note = medie_note/this->nrNote;
        return medie_note;
    }
    void setNume(char* a)
    {
        if(this->nume!=nullptr)
            delete[] this->nume;

        this->nume = new char[strlen(a)+1];
        strcpy(this->nume,a);
    }
    void setNote(int* a,int b)
    {
        if(this->note!=nullptr)
            delete[] this->note;
        this->nrNote = b;
        this->note = new int[b];
        for( int i =0;i < b;i++)
            this->note[i] = a[i];

    }
    void setVarsta(int a)
    {
        this->varsta = a;
    }
    int getVarsta()
    {
        return this->varsta;
    }
    char* getNume()
    {
        return this->nume;
    }
    int* getNote()
    {
        return this->note;
    }
    int getNrnote()
    {
        return this->nrNote;
    }
    ~Student()
    {
        if(this->note != NULL) //sau diferit de nullptr
            delete[] this->note;
        if(this->nume != NULL) //sau diferit de nullptr
            delete[] this->nume;
    }

};

int Student::anCurent=2;


int main()
{
    cout<< Student::anCurent<<endl;
    Student::mesaj();
    Student s;

    char nume[]= {"POO"};
    char nume2[]= {"POO2"};
    int note[]={5,6,7,8};

    Student s2(101,3,nume,4,note);

    s2.afisare();

    cout<<s2.getNume()<<endl;
    int* note2 = s2.getNote();
    s2.setNume(nume2);
    cout<<s2.getNume()<<endl;
    for(int i = 0;i < s2.getNrnote();i++)
        cout<<*(note+i)<<" ";
    cout<<endl;
    cout<<s2.getVarsta()<<endl;
    s2.setVarsta(24);
    cout<<s2.getVarsta()<<endl;

    int note3[]={5,6,7,8,10};
    for(int i = 0;i < s2.getNrnote();i++)
        cout<<*(note3+i)<<" ";
    cout<<endl;
    s2.setNote(note3,5);
    for(int i = 0;i < s2.getNrnote();i++)
        cout<<*(note3+i)<<" ";
    cout<<endl;
    cout<<s2.medieStudent();
    return 0;
}
